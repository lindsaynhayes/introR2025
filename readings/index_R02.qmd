---
title: "Navigating Data Types in R"
description: "Reading for Class 02"
author: 
  - name: Lindsay Hayes
    url: https://lindsaynhayes.github.io
    affiliation: Department of Cell Biology, OUHSC
date: 2025-07-03
draft: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| message: false
library(here)
```

The last class introduced important concepts in data science such as directory structure, working directories, projects, and quarto documents. This lesson will dig deeper into working with data in R. We will cover importing and exporting, data types, and data objects

Spreadsheets are good for data entry. As a scientists, we have a lot of data in spreadsheets. However, data exploration, manipulation, and visualization tools in spreadsheets are extremely limited and cumbersome when performed manually. Much of your time as a researcher will be spent data wrangling to generate the analyses you desire. R makes this process easy and most importantly reproducible.

::: callout-note
### Learning objectives

**At the end of this lesson you will be able to:**

-   Generate and navigate a quarto document
-   Understand what packages are and how to use them
-   Get data in and out of R
-   Recognize and create various data types in R
:::

## Welcome to Quarto

In the first class, we looked at the `PalmerPenguins` data in a very tidy and curated quarto document to see how you can incorporate narrative text, code, outputs, and more in a single document. I hope you can now appreciate the utility of using Quarto to tell the story of the data analysis. The beautiful html outputs can easily be shared with others and helps build the logic of a data analysis pipeline from beginning to end.

Read the [Quarto welcome tutorial](https://quarto.org/docs/get-started/hello/rstudio.html) to learn about some of the cool tools, such as `code-folding`, `echo=false`, and more.

-   Read through Part 1: "Hello, Quarto"
-   Read through Part 2: "Computations".
-   Part 3 is more advanced for generating diverse outputs such as pdf documents feel free to explore, but we won't use these features.

## Packages

### What is a package?

In R, the fundamental unit of shareable code is the **package.** A package bundles together *code*, *data*, *documentation*, and *tests*, and is easy to share with others. There are tens of thousands of R packages that exist. Two main repository of R packages exist. **CRAN** or the Comprehensive R Archive Network is the public clearing house for R packages and where you went to install R. **Bioconductor** is an open source project that develops and shares open source software for precise and repeatable analysis of biological data. It is this huge variety of packages that R is so successful because the chances are high that someone has already solved a problem that you’re working on.

### How to get a package?

To install packages from CRAN use the `install.packages()` function. Once the package is installed you can load the package using the `library()` function. Installing packages from Bioconductor take a few more steps which we won't cover just yet.

In Lecture 2 we will use data from the `tidyverse` and `taylor` packages.

<img src="figs/tidy_hex.png" width="50%" style="float:right"/>

### Tidyverse package

The [Tidyverse](https://www.tidyverse.org) which is a collection of R packages that share an underlying design, syntax, and grammer to streamline many main functions used in data science. You can install the complete tidyverse with `install.packages("tidyverse")`, once the package is installed you can load it using `library(tidyverse)`. We will go over more details about all the functions of the tidyverse package next class!

### Taylor package

The [taylor](https://taylor.wjakethompson.com) package is for accessing and exploring data related to Taylor Swift’s discography, including lyrics and audio characteristics. The data comes Genius and the Spotify.

## Tidy Syntax

The BIG picture of what we do in data science.

<img src="figs/base.png" width="90%" style="display:block; margin-left: auto; margin-right: auto"/>

<figcaption>Figure 1: In our model of the data science process, you start with data import and tidying. Next, you understand your data with an iterative cycle of transforming, visualizing, and modeling. You finish the process by communicating your results to other humans.</figcaption>

### Import

First we need to import data into R. I prefer to import *.csv* files because I think its a good way to indicate a data file and it eliminates any weird formatting that may exist in excel. I am showing 2 ways to import the data one using base R function `read.csv()` and the other using the `readr` function `read_csv()`.

In base R, the `header` field determines if the first row of the data had column header titles or not. The `stringsAsFactors` determines if the character variables in your data set should be set as a factor variable (set as TRUE) or as character (set to FALSE). The `row.names` field will allow you to specify if the first column is data or the names of the rows.

In tidyverse, the `col_names` field specifies if the first row is a header. If you want to specify the type of data for each field you have to specify it using the `col_types` field. I specified that for you here. There are a lot more options you can look at in the *Help* section.

```{r}
#| label: setup
#| include: false
#| eval: false

library(readr)
library(taylor)

data <- taylor_all_songs
final <- data[1:314,c(1,3,4,5,12:28)]
types <- as.character(as.col_spec(final))
types <- "fDicddididdddddiilfff"
write_csv(final, file = "data/taylorswift.csv")

```

```{r}
#| label: importing.data
#| message: false

library(readr)

# reading in csv is for importing comma-separated files

# base R
data_base <- read.csv(file = "data/taylorswift.csv", 
                 header = TRUE, 
                 sep = ",", 
                 stringsAsFactors = TRUE)


# Tidyverse
data_tidy <- read_csv(file = "data/taylorswift.csv",
                 col_names = TRUE)

```

Using `readr` you can also import data directly from excel spreadsheets using `read_excel` or `read_xls` and even google sheets using `read_sheet`. However, we won't use these function in the course. But you are free to explore them on your own from the [readr package](https://readr.tidyverse.org).

### Export

You can also save files using the `write` functions for both csv or tsv files.

```{r}
#| label: exporting.data
#| message: false
#| eval: false

# base R
write.csv(data, file = "data/taylorswift.csv")

# Tidyverse
write_csv(data, file = "data/taylorswift.csv")
```

### Explore

Anytime you get a data set the first thing you have to do is look at it! Some basic things to look at:

-   Use the `dim()` function to check the size of the data set or `nrow` to count the rows and `ncol` to count the columns.
-   Use the `class()` function to determine if an R object is a vector, matrix, or dataframe. And if the data type is in character, numeric, factor, or logic, for example.
-   Use the`table()` or `count()` functions to tally the data to see how many types of any variable
-   `glimpse()` is a quick way to view a snapshot of top of the data.

::: callout-important
## DATA TYPES

-   character
-   numeric
-   integer
-   factor
-   logical
:::

Lets look at data types in the `taylorswift` data in R

```{r}
#| label: data.type
#| message: false
#| eval: true

# first load the packages we are going to need
library(tidyverse)

# next import some data, as an example we are using the taylorswift data
data <- read_csv(file = "data/taylorswift.csv",
                 col_names = TRUE)

# Its good to start any data analysis with basic data exploration.
# how many columns of data are there?
ncol(data)

# how many rows of observations are there?
nrow(data)

# when we imported the data, what is the type of data in each column?
as.data.frame(map_chr(data, class))
glimpse(data)

```

### Convert between data types
Oftentimes text is imported as a character variable. However, you may want that to be a factor to indicate there are 4 groups,  or a numeric variable should actually be a factor. The most common data type conversions are between: 1) characters -\> factors 2) numeric -\> factors. 

For example, if you measured something across time at day 1, 5, 15, 30, 60, 120. Plotting the data across the expansive axis will make each groups not evenly divided so it can be useful to make the numeric variable a factor so all the data groups plot next to each other. 

```{r}
#| label: chr2fac
#| message: false
#| eval: false

# note alphabetical order
ggplot(data, aes(x=album_release, y=duration_ms, color = album_name)) + geom_point()


ggplot(data, aes(x=track_number, y=duration_ms, color = album_name)) + geom_point()


mod <- lm(duration_ms ~ album_name, data = data) 
anova(mod)





# change the album name from character to factor
data$album_name <- as.factor(data$album_name) # order = alphabetical
data$album_name <- as_factor(data$album_name) # order = as unique()

mod <- lm(tempo ~ album_name, data = data) 
anova(mod)


```

```{r}
# sometimes we want numeric variables as numbers and sometimes we want them to be factors. In this case the x axis is spaced based on the time between album releases.
ggplot(data, aes(x=album_release, y = track_number)) + geom_point()

# If we convert the year to a factor variable the time between won't matter and it will be equally distributed.

data$album_release <- as.factor(data$album_release)
ggplot(data, aes(x=album_release, y = track_number)) + geom_point() + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

# This makes a big difference not only for the plotting, but will also impact how statistical analyses are performed. So be careful and make sure the data type is correctly specified (continuous versus categorical versus factored versus ordered)


ggplot(data, aes(x=time_signature, y = key)) + geom_point()


```

Examples I want to include: character to factor and ordered how that makes a difference in plotting and statistics

numeric to factor and ordered how that makes a difference in plotting and statistics

::: callout-tip
### Want More?

There are so many great tools to learn R and data science!

-   To explore the tidyverse and data science in more detail check out the *R for Data Science* [textbook](https://r4ds.hadley.nz) written by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.

-   Want more stats and data science conversations?! Check out the **not so standard deviations** [podcast](https://nssdeviations.com) by Roger Peng and Hilary Parker.
:::
