{
  "hash": "ee5ebe94c94e0638eaf213a5542f7af4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Functional programming\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Using the `purrr` package to work with functions and vectors\"\ndate: 2024-11-05\n---\n\n\n\n\n\n# Pre-lecture activities\n\n::: callout-important\n\nIn advance of class, please install\n\n* `purrr` - this provides a consistent functional programming interface to work with functions and vectors\n\nYou can do this by calling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"purrr\")\n```\n:::\n\n\n\n\nAnd load the package using: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n\n\n:::\n\nIn addition, please read through\n\n- <https://adv-r.hadley.nz/functionals.html>\n- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>\n\n\n\n::: callout-note\n\n## How much should I prepare for before class? \n\n:::\n\n\n# Lecture \n\n## Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- <https://adv-r.hadley.nz/fp.html>\n- <https://adv-r.hadley.nz/functionals.html>\n- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>\n\n\n## Learning objectives\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Be familiar with the concept of _functional languages_ and _functional styles_ of programming\n-   Get comfortable with the major functions in  `purrr` (e.g. the `map` family of functions)\n-   Write your loops with `map` functions instead of the `for` loop\n\n:::\n\n\n## Slides \n\n- To be added. \n\n\n# Post-lecture\n\n## Summary \n\n- Introduction to functional programming.\n- The R package `purrr` provides a nice interface to functional programming and list manipulation.\n- The function `map` and its aternative `map_*` provide a neat way to iterate over a list or vector with the output in different data structures.\n- The function `map2` and `pmap` allow having more than one list as input.\n- The function `walk` and its alternatives `walk2`, `walk_*`, which do not provide any output.\n\n## Additional practice\n\nHere are some additional practice questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1. Use `as_mapper()` to explore how purrr generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.\n\n2. `map(1:3, ~ runif(2))` is a useful pattern for generating random numbers, but `map(1:3, runif(2))` is not. Why not? Can you explain why it returns the result that it does?\n\n3. Can you write a section of code to demonstrate the central limit theorem primarily using the `purrr` package and/or using the R base package?  \n\n4.  Use the appropriate `map()` function to:\n    \n    a) Compute the standard deviation of every column in a numeric data frame.\n    \n    a) Compute the standard deviation of every numeric column in a mixed data\n       frame. (Hint: you will need to do it in two steps.)\n       \n    a) Compute the number of levels for every factor in a data frame.\n\n5.  The following code simulates the performance of a t-test for non-normal \n    data. Extract the p-value from each test, then visualise.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    trials <- map(1:100, ~ t.test(rpois(10, 10), rpois(7, 10)))\n    ```\n    :::\n\n\n\n\n6.  Use `map()` to fit linear models to the `mtcars` dataset using the formulas\n    stored in this list:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    data(mtcars)\n    formulas <- list(\n      mpg ~ disp,\n      mpg ~ I(1 / disp),\n      mpg ~ disp + wt,\n      mpg ~ I(1 / disp) + wt\n    )\n    ```\n    :::\n\n\n\n\n7.  Fit the model `mpg ~ disp` to each of the bootstrap replicates of `mtcars` \n    in the list below, then extract the $R^2$ of the model fit (Hint: you can\n    compute the $R^2$ with `summary()`.)\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    bootstrap <- function(df) {\n      df[sample(nrow(df), replace = TRUE), , drop = FALSE]\n    }\n    \n    bootstraps <- map(1:10, ~ bootstrap(mtcars))\n    ```\n    :::\n\n\n\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}