{
  "hash": "30be50bc71914e0cc57191428b7399c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predictions Analysis using tidymodels\"\nauthor: \"Lindsay N. Hayes\"\ndate: 2025-07-16\ndraft: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## About the activity\n\n1)  Access the Quarto document [here](https://github.com/lindsaynhayes/introR2025/blob/main/activities/classwork05/PCA_Penguins.qmd).\n\n2)  Download the raw file.\n\n3) Open it in RStudio.\n\nWe will work our way through this quarto document together during class. The activity will cover Principal Component Analysis (PCA) using tidymodels.\n\n\nhttps://www.stepbystepdatascience.com/ml-with-tidymodels\n\n\n\n## Load the Packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(palmerpenguins)\n```\n:::\n\n\n## Explore the Data\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins |> count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n## Build the model\n\n::: {.cell}\n\n```{.r .cell-code}\n# set a seed\nset.seed(462)\n\n# split the data into training and testing sets\n\nsplit_data <- initial_split(penguins, prop=0.7, strata = species)\ndata_training <- training(split_data)\ndata_testing <- testing(split_data)\n\n# lets check it did the split correctly\n\ndata_training |> \n  group_by(species) |>\n  summarise( count = n(),\n             percent = n()/nrow(data_training) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species   count percent\n  <fct>     <int>   <dbl>\n1 Adelie      106    44.4\n2 Chinstrap    47    19.7\n3 Gentoo       86    36.0\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_testing |> \n  group_by(species) |>\n  summarise( count = n(),\n             percent = n()/nrow(data_testing) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species   count percent\n  <fct>     <int>   <dbl>\n1 Adelie       46    43.8\n2 Chinstrap    21    20  \n3 Gentoo       38    36.2\n```\n\n\n:::\n\n```{.r .cell-code}\npenguin_recipe <-\n  recipe( species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = penguins) %>%\n  step_normalize(all_predictors())\n\npenguin_recipe\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Recipe ──────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Inputs \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNumber of variables by role\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\noutcome:   1\npredictor: 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Operations \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Centering and scaling for: all_predictors()\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_prep <- prep(penguin_recipe, data_training)\ndata_prep\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Recipe ──────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Inputs \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNumber of variables by role\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\noutcome:   1\npredictor: 4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Training information \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTraining data contained 239 data points and no incomplete rows.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Operations \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Centering and scaling for: bill_length_mm bill_depth_mm, ... | Trained\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_bake <- bake(data_prep, new_data = NULL)\ndata_bake\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 239 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g species\n            <dbl>         <dbl>             <dbl>       <dbl> <fct>  \n 1         -0.808        0.120             -1.10      -0.501  Adelie \n 2         -0.660        0.426             -0.447     -1.21   Adelie \n 3         -0.845        1.75              -0.812     -0.695  Adelie \n 4         -0.918        0.324             -1.47      -0.727  Adelie \n 5         -0.863        1.24              -0.447      0.625  Adelie \n 6         -1.80         0.477             -0.593     -0.920  Adelie \n 7         -0.346        1.55              -0.812      0.0780 Adelie \n 8         -1.12        -0.0333            -1.10      -1.15   Adelie \n 9         -1.12         0.0687            -1.54      -0.630  Adelie \n10         -0.974        2.06              -0.739     -0.501  Adelie \n# ℹ 229 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# MODEL 1 Random Forest\nlibrary(ranger)\nrf_model <- \n  # model type\n  rand_forest() %>%\n  # arguments\n  set_args(mtry = 4) %>%\n  # engine/package that underlies the model\n  set_engine(\"ranger\", importance = \"impurity\") %>%\n  # mode\n  set_mode(\"classification\") \n\n\n# MODEL 2 Logistic Regression\nlr_model <- \n  # specify that the model is a multinom_reg\n  multinom_reg() %>%\n  # select the engine/package that underlies the model\n  set_engine(\"nnet\") %>%\n  # choose either the continuous regression or binary classification mode\n  set_mode(\"classification\") \n\n\nrf_wflow <- \n  workflow() |>\n  add_recipe(penguin_recipe) |>\n  add_model(rf_model)\n\nlr_wflow <- \n  workflow() |>\n  add_recipe(penguin_recipe) |>\n  add_model(lr_model)\n\n\nrf_fit <- fit(rf_wflow, data_training)\nlr_fit <- fit(lr_wflow, data_training)\n```\n:::\n\n\n## evaluate the model\n\n::: {.cell}\n\n```{.r .cell-code}\nrf.predict <- predict(rf_fit, data_testing)\nlr.predict <- predict(lr_fit, data_testing)\n\n\n\n\nrf.outcome <- rf.predict %>%\n  transmute(pred = .pred_class,\n            truth = data_testing$species)\n\nrf.outcome |> accuracy(pred, truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.981\n```\n\n\n:::\n\n```{.r .cell-code}\nrf.outcome |> conf_mat(pred, truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        46         0      0\n  Chinstrap      1        20      0\n  Gentoo         1         0     37\n```\n\n\n:::\n\n```{.r .cell-code}\nlr.outcome <- lr.predict %>%\n  transmute(pred = .pred_class,\n            truth = data_testing$species)\n\n# accuracy\nlr.outcome |> accuracy(pred, truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.990\n```\n\n\n:::\n\n```{.r .cell-code}\n# confusion matrix\nlr.outcome |> conf_mat(pred, truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        44         1      0\n  Chinstrap      0        21      0\n  Gentoo         0         0     37\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}