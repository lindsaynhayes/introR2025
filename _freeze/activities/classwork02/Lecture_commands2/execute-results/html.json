{
  "hash": "31e373e1ce1fe04abaad9f85148a03f9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Navigating Data Types in R\"\ndescription: \"commands used in lecture\"\nauthor: \"Lindsay N. Hayes\"\ndate: 2025-07-03\ndraft: true\neditor_options: \n  chunk_output_type: console\neval: false\n---\n\n\n# Lecture\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nimport\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(file = \"activities/a/taylorswift.csv\",\n                      header = TRUE, \n                      sep = \",\", \n                      stringsAsFactors = TRUE)\n\n\ndata <- read_csv(file = \"activities/a/taylorswift.csv\",\n                      col_names = TRUE)\n```\n:::\n\n\nexport\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nwrite.csv(data, file = \"data/taylorswift.csv\")\n\n# Tidyverse\nwrite_csv(data, file = \"data/taylorswift.csv\")\n```\n:::\n\n\nR Syntax 1\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3 + 4\nelection_years <- c(1980, 1984, 1988, 1992, 1996)\ncapital_cities <- c(\"Bismarck\", \"Salem\", \"Cheyenne\")\n\n# this allows you to explain the code with narrative text next to the code.\n```\n:::\n\n\n\nR Syntax 2\n\n::: {.cell}\n\n```{.r .cell-code}\n# A function is an operator or a “verb” performed on data\nmean(1:10)\nseq(from = 1, to = 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n\n# Pipes are a tool to send the output of one operation directly into a second operation (or third …)\n\n# Conventional pipe symbol: |>\n# Older pipe version you may see: %>%\n\nflights |> \n  filter(dest == \"IAH\") |> \n  mutate(speed = distance / air_time * 60) |> \n  select(year:day, dep_time, carrier, flight, speed) |> \n  arrange(desc(speed))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\n# There are many way to access select parts of your data\n# To get a specific column of data use “$”\npenguins$species\n\n# You can also access parts of the data using “[]”\ndim(penguins)\n\nx <- 1:10\n\n\n\n\n# there are 344 rows of data and 8 observations\npenguins[1:5, 1:2] \npenguins[5,] \npenguins[,4] \npenguins[,\"species\"] \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset and Filter the data to perform operations\n\npenguins |> filter(species == \"Gentoo\")\nsubset(penguins, species == \"Gentoo\")\n\npenguins |> filter(bill_length_mm > 50)\n\n# A longer approach but can sometimes be useful\n# this command will give you a list of TRUE and FALSE\n\npenguins$bill_length_mm > 50\n\n# the which() command will then turn those T/F into rownumbers or a numerical vector\nwhich(penguins$bill_length_mm > 50)\n\npenguins[which(penguins$bill_length_mm > 50),]\n```\n:::\n\n\n\nEXPLORE 1\n\n::: {.cell}\n\n```{.r .cell-code}\n# Categorical data: characters and factors\n\ntable(penguins$species)\n\npenguins |> count(species)\n\nplot(table(penguins$species))\nbarplot(table(penguins$species))\nboxplot(table(penguins$species))\n\npenguins |> \n  count(species) |> \n  ggplot(aes(x=species, y=n)) + \n    geom_col(, fill = \"red\")\n```\n:::\n\n\n\nEXPLORE 2\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(penguins$body_mass_g)\n\nboxplot(penguins$body_mass_g)\nhist(penguins$body_mass_g)\n\nggplot(penguins, aes(y = body_mass_g)) + \ngeom_boxplot(fill = \"purple\") + \ntheme_cowplot() + \nscale_x_discrete( )\n\nggplot(penguins, aes(x = body_mass_g)) + \ngeom_histogram(fill = \"deepskyblue\") + \ntheme_cowplot()\n```\n:::\n\n\nCONVERT to Factor\n\n::: {.cell}\n\n```{.r .cell-code}\n# characters\nmonths <- c(\"Mar\",\"Sep\", \"Jun\", \"Dec\", \"Oct\",\"Nov\", \"Jan\",\"Apr\",\"Jul\",\"Feb\",\"May\",\"Aug\")\n\nmonths_factor <- factor(months)\n\nclass(months_factor)\n\nmonths_factor <- factor(months_factor, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n\n\n# numeric, i.e. time uneven spacing\n\nhours <- c(0, 0.5, 1, 3, 6, 12, 18, 24, 48, 72, 96, 200)\nhours <- factor(hours)\n\n\n\n# numeric, i.e. group assignments, treatment data\n\ngroup <- c(1,2,1,2,1,2,1,2,1,2,1,2)\ngroup <- factor(group)\n\n\n\ndata$album_name <- factor(data$album_name, levels = unique(data$album_name[order(data$album_release)]))\n```\n:::\n",
    "supporting": [
      "Lecture_commands2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}