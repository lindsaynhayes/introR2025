{
  "hash": "87a08e1d2bc028a35c564c7a59b896f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R & RStudio\"\n#subtitle: \"01-RStudio\"\ndescription: \"Reading for Class 01\"\nauthor: \n  - name: Lindsay Hayes\n    url: https://lindsaynhayes.github.io\n    affiliation: Department of Cell Biology, OUHSC\ndate: 2025-07-01\ndraft: false\n---\n\n::: {.cell}\n\n:::\n\n\n# Welcome to R/RStudio\n\nWhat is R and RStudio and why is it important to learn and implement in all your data analysis pipelines from simple to complex? The reading below and the the materials covered during this course will answer this very question. \n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Describe the purpose of the RStudio Script, Console, Environment, and Plots panes.\n-   Organize files and directories for a set of analyses as an R project, and understand the purpose of the working directory.\n-   Use the built-in RStudio help interface to search for more information on R functions.\n-   Demonstrate how to provide sufficient information for troubleshooting with the R user community.\n:::\n\n## What is R & Why learn it??\n\nThe term [R](https://www.r-project.org/) is used to refer to the *programming language*, the *environment for statistical computing*, and *the software* that interprets the scripts written using it.\n\n[RStudio](https://rstudio.com) is currently a very popular way to not only write your R scripts but also to interact with the R software[^plainr]. To function correctly, RStudio needs R and therefore both need to be installed on your computer.\n\n[^plainr]: As opposed to using R directly from the command line console.\n\nThe [RStudio IDE Cheat Sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/rstudio-ide.pdf) provides much more information than will be covered here, but can be useful to learn keyboard shortcuts and discover new features.\n\n![Why you need R](../images/L01/cartoon_data.jpg){width=300}\n\n### R does not involve lots of pointing and clicking, *that's a good thing*\n\nThe learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that's a good thing! So, if you want to redo your analysis because you collected more data, you don't have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\n\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\n\nWorking with scripts forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n### R code is reproducibile\n\nReproducibility means that someone else (including your future self) can obtain the same results from the same dataset when using the same analysis code.\n\nR integrates with other tools to generate manuscripts or reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript or report are updated automatically.\n\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n### R is interdisciplinary and extensible\n\nWith 10,000+ packages that can be installed to extend R's capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyse your data.\n\n### R works on data of all shapes and sizes\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has tens, hundreds, or millions of lines, it won't make much difference to you as the programmer.\n\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient. *We will cover this more in the section on data structures.*\n\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n### R produces high-quality graphics\n\nThe plotting functions in R are extensive, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n### R has a large and welcoming community\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as [Stack\nOverflow](https://stackoverflow.com/), or on the [RStudio community](https://community.rstudio.com/). These broad user communities extend to specialized areas such as bioinformatics. One such subset of the R community is [Bioconductor](https://bioconductor.org/), a scientific project for analysis of data from current and emerging biological assays.\n\n### R free and open-source!!\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs.\n\n\n## Navigating R in RStudio\nWe will use the RStudio IDE to write code, navigate the files on our computer, inspect the variables we are going to create, and visualize the plots we will generate.\n\n![A schematic representing the layout of RStudio](../images/L01/rstudio_session_4pane_layout.png)\n\nThe RStudio window is divided into 4 “Panes”:\n\n-   Source code for your scripts and documents (top-left)\n-   Environment/History (top-right)\n-   Files/Plots/Packages/Help/Viewer (bottom-right)\n-   R Console, or outputs (bottom-left).\n\nThe placement of these panes and their content can be customized *(Tools > Global Options > Pane Layout)*.\n\nAdvantages of using RStudio is that all the information you need to write code is available in a single window. Additionally, with many **shortcuts**, **autocompletion**, and **highlighting** RStudio makes typing easier and less error-prone. This very text was written in RStudio!\n\n\n## Managing Projects in RStudio\n\n### The Problem\nThe scientific process is naturally incremental and many projects start life as random notes, some data, some code, then a manuscript, and eventually everything is a bit mixed together. Properly managing the progression of files as a project matures can be challenging. Good data management at the start will save you an *immeasurable* amount of time at the end. \n\nMost people tend to organize their projects like this: \n\n![Bad File Structure](../images/L01/bad_layout.png)\nThere are many reasons why we should ALWAYS avoid this:\n\n-   It is hard to tell which version of the data is the original and which is the modified.\n-   It is messy because it mixes files with various extensions together.\n-   It takes a lot of time to actually find things, and relate the correct figures to the exact code used to generate it.\n\n**A good project layout will ultimately make your life easier!!**\n\n-   It ensure the integrity of your data.\n-   It is simpler to share your code with someone else (a lab-mate, collaborator, or supervisor).\n-   It allows you to easily upload your data and code with your manuscript submission.\n-   It makes it easier to pick the project back up after a break.\n\n### The Solution\n\nR Project Directory Structure (for data science and for life)\n\nHere are examples of project data management.\n\n![File Structure for Data Analysis](../images/L01/tree1.png){width=300}\n\n\n![File Structure for Experiments](../images/L01/tree2.png){width=300}\n\n\n\n\n\n::: callout-important\nAdvice on File Naming\n\n-   Avoid spaces in a name (ie: project 1.Rproj)\n-   Do use dashes (-), underscores (_), or periods (filename_project1.qmd)\n-   Avoid quotes and special characters (\", $, #)\n-   Use dates in year-month-day format for better file sorting (250701_plot.png)\n-   Use a numbering system to order steps in a pipeline (1.first.qmd, 2.second.qmd, 3.third.qmd)\n-   📢 **ANNOTATE, LOG, and NOTEKEEP**\n\n:::\n\n## References \n\n::: callout-tip\n### References\n\n**Content pulled from**\n\n-   swcarpentry: R <https://carpentries-incubator.github.io/bioc-intro/20-r-rstudio.html#why-learn-r>\n-   swcarpentry: Project Management <https://swcarpentry.github.io/r-novice-gapminder/instructor/02-project-intro.html>\n\n:::",
    "supporting": [
      "index_R01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}