{
  "hash": "4b15209809cb3c91984d71d61bacea20",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Wrangling\"\ndescription: \"Reading for Class 02\"\nauthor: \n  - name: Lindsay Hayes\n    url: https://lindsaynhayes.github.io\n    affiliation: Department of Cell Biology, OUHSC\ndate: 2025-07-03\ndraft: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\nSpreadsheets are good for data entry. As a scientists, we have a lot of data in spreadsheets. However, data exploration, manipulation, and visualization tools in spreadsheets are extremely limited and cumbersome when performed manually. Much of your time as a researcher will be spent **data wrangling** to generate the analyses you desire.\n\nR makes this process easy and most importantly reproducible. This less will teach you how to think about data organization and some practices for effective data wrangling.\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will be able to:**\n\n-   Generate and navigate a quarto document\n-   Import Data into R\n-   Recognize data format as long or wide format\n-   Understand when to use both formats and how to convert between long and wide\n:::\n\n## Welcome to Quarto\n\nIn the first class, we looked at the `PalmerPenguins` data in a very tidy and curated quarto document to see how you can incorporate narrative text, code, outputs, and more in a single document. I hope you can now appreciate the utility of using Quarto to tell the story of the data analysis. The beautiful html outputs can easily be shared with others and helps build the logic of a data analysis pipeline from beginning to end.\n\nRead the [Quarto welcome tutorial](https://quarto.org/docs/get-started/hello/rstudio.html) to learn about some of the cool tools, such as `code-folding`, `echo=false`, and more.\n\n-   Read through Part 1: \"Hello, Quarto\"\n-   Read through Part 2: \"Computations\".\n-   Part 3 is more advanced for generating diverse outputs such as pdf documents feel free to explore, but we won't use this feature.\n\n## The Tidyverse\n\n### What is a package?\n\nIn R, the fundamental unit of shareable code is the **package.** A package bundles together *code*, *data*, *documentation*, and *tests*, and is easy to share with others. There are tens of thousands of R packages that exist. Two main repository of R packages exist. **CRAN** or the Comprehensive R Archive Network is the public clearing house for R packages and where you went to install R. **Bioconductor** is an open source project that develops and shares open source software for precise and repeatable analysis of biological data. It is this huge variety of packages that R is so successful because the chances are high that someone has already solved a problem that you’re working on.\n\n### How to get a package?\n\nTo install packages from CRAN use the `install.packages()` function. Once the package is installed you can load the pack using the `library()` function. Installing packages from Bioconductor take a few more steps which we won't cover just yet.\n\n<img src=\"figs/tidy_hex.png\" width=\"50%\" style=\"float:right\"/>\n\n### Tidyverse package\n\nThe [Tidyverse](https://www.tidyverse.org) which is a collection of R packages that share an underlying design, syntax, and grammer to streamline many main functions used in data science. You can install the complete tidyverse with `install.packages(\"tidyverse\")`, once the package is installed you can load it using `library(tidyverse)`.\n\nThe packages installed in tidyverse include:\n\n-   `ggplot2` is a graphic package to plot your data.\n-   `dplyr` and `tidyr` are packages for data manipulation to subset, re-arrange, and format your dataset.\n-   `readr` is a tidy way to input or read in data into R.\n-   `purrr` is a functional programming toolkit to handle looping functions.\n-   `tibble` is a tidy way of displaying data frames that are easier to view.\n-   `stringr` is a way of handling text and character strings.\n-   `forcats` is a package providing tools to handle categorical variables and discrete (non-continuous) variables.\n-   `lubridate` is a package for working with times and dates.\n\n::: callout-important\nThere are nice [cheatsheets](https://posit.co/resources/cheatsheets/) for each of the packages to demonstrate what they do in detail!\n:::\n\n## Tidy Syntax\n\nThe BIG picture of what we do in data science. \n\n<img src=\"figs/base.png\" width=\"90%\" style=\"display:block; margin-left: auto; margin-right: auto\"/>\n<figcaption>Figure 1: In our model of the data science process, you start with data import and tidying. Next, you understand your data with an iterative cycle of transforming, visualizing, and modeling. You finish the process by communicating your results to other humans.</figcaption>\n\n\nIn this next class we will focus on the **Import**, **Tidy**, and **Transform** parts of the data science pipeline. \n\n### Import\nFirst we need to import data into R. I prefer to import .csv files because I think its a good way to indicate a data file and it eliminates any weird formatting that may exist in excel. I am showing 2 ways to import the data one using base R function `read.csv()` and the other using the `readr` function `read_csv`. \n\nIn base R, the `header` field determines if the first row of the data had column header titles or not. The `stringsAsFactors` determines if the character variables in your data set should be set as a factor variable (set as TRUE) or as character (set to FALSE). The `row.names` field will allow you to specify if the first column is data or the names of the rows. \n\nIn tidyverse, the `col_names` field specifies if the first row is a header. If you want to specify the type of data for each field you have to specify it using the `col_types` field. I specified that for you here. There are a lot more options you can look at in the *Help* section.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\n# BASE R\n# read.csv() is for importing comma-separated files\ndata_base <- read.csv(file = \"data/taylorswift.csv\", \n                 header = TRUE, \n                 sep = \",\", \n                 stringsAsFactors = TRUE)\n\n\n# Tidyverse\ndata_tidy <- read_csv(file = \"data/taylorswift.csv\",\n                 col_names = TRUE)\n```\n:::\n\n\nUsing `readr` you can also import data directly from excel spreadsheets using `read_excel` or `read_xls` and even google sheets using `read_sheet`. However, we won't use these function in the course. But you are free to explore them on your own from the [readr package](https://readr.tidyverse.org).\n\n### Export\nYou can also save files using the `write` functions for both csv or tsv files. \n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(data, file = \"data/taylorswift.csv\")\n```\n:::\n\n\n### Tidy & Transform\nThe next step it to tidy and transform the data into the format that R can use to perform visualization and analysis. We will use some of the tools in `dplyr` and `tidyr`.\n\n::: callout-important\n### A note on pipes!\n\n\"Piping\" is a process of directly sending the output of one funtion into the input of the next function. Piping can be performed in a long line of commands as a way of streamling the code writing to make it easier to read. We will use this a lot in this course.\n\n`%>%` is the pipe command to connect 2 functions\n\n`|>` is the same pipe command, but in a different syntax\n\nThe code in the course will mostly use `|>` because this is the tidyverse way of writing code, but across the internet you will also see `%>%`\n\n:::\n\n#### Assigning Data Types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\n```\n:::\n\n\n\n\n\n\n::: callout-tip\n### Want More?\n\nThere are so many great tools to learn R and data science!\n\n-   To explore the tidyverse and data science in more detail check out the *R for Data Science* [textbook](https://r4ds.hadley.nz) written by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\n\n-   Want more stats and data science conversations?! Check out the **not so standard deviations** [podcast](https://nssdeviations.com) by Roger Peng and Hilary Parker.\n:::\n\n\n\n",
    "supporting": [
      "index_R02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}