{
  "hash": "5faebd0d854f5fef28b78f99a9a2c9e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Navigating Data Types in R\"\ndescription: \"Reading for Class 02\"\nauthor: \n  - name: Lindsay Hayes\n    url: https://lindsaynhayes.github.io\n    affiliation: Department of Cell Biology, OUHSC\ndate: 2025-07-03\ndraft: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\nThe last class introduced important concepts in data science such as directory structure, working directories, projects, and quarto documents. This lesson will dig deeper into working with data in R. We will cover importing and exporting, data types, and data objects\n\nSpreadsheets are good for data entry. As a scientists, we have a lot of data in spreadsheets. However, data exploration, manipulation, and visualization tools in spreadsheets are extremely limited and cumbersome when performed manually. Much of your time as a researcher will be spent data wrangling to generate the analyses you desire. R makes this process easy and most importantly reproducible.\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will be able to:**\n\n-   Generate and navigate a quarto document\n-   Understand what packages are and how to use them\n-   Get data in and out of R\n-   Recognize and create various data types in R\n:::\n\n## Welcome to Quarto\n\nIn the first class, we looked at the `PalmerPenguins` data in a very tidy and curated quarto document to see how you can incorporate narrative text, code, outputs, and more in a single document. I hope you can now appreciate the utility of using Quarto to tell the story of the data analysis. The beautiful html outputs can easily be shared with others and helps build the logic of a data analysis pipeline from beginning to end.\n\nRead the [Quarto welcome tutorial](https://quarto.org/docs/get-started/hello/rstudio.html) to learn about some of the cool tools, such as `code-folding`, `echo=false`, and more.\n\n-   Read through Part 1: \"Hello, Quarto\"\n-   Read through Part 2: \"Computations\".\n-   Part 3 is more advanced for generating diverse outputs such as pdf documents feel free to explore, but we won't use these features.\n\n## Packages\n\n### What is a package?\n\nIn R, the fundamental unit of shareable code is the **package.** A package bundles together *code*, *data*, *documentation*, and *tests*, and is easy to share with others. There are tens of thousands of R packages that exist. Two main repository of R packages exist. **CRAN** or the Comprehensive R Archive Network is the public clearing house for R packages and where you went to install R. **Bioconductor** is an open source project that develops and shares open source software for precise and repeatable analysis of biological data. It is this huge variety of packages that R is so successful because the chances are high that someone has already solved a problem that you’re working on.\n\n### How to get a package?\n\nTo install packages from CRAN use the `install.packages()` function. Once the package is installed you can load the package using the `library()` function. Installing packages from Bioconductor take a few more steps which we won't cover just yet.\n\nIn Lecture 2 we will use data from the `tidyverse` and `taylor` packages.\n\n<img src=\"figs/tidy_hex.png\" width=\"50%\" style=\"float:right\"/>\n\n### Tidyverse package\n\nThe [Tidyverse](https://www.tidyverse.org) which is a collection of R packages that share an underlying design, syntax, and grammer to streamline many main functions used in data science. You can install the complete tidyverse with `install.packages(\"tidyverse\")`, once the package is installed you can load it using `library(tidyverse)`. We will go over more details about all the functions of the tidyverse package next class!\n\n### Taylor package\n\nThe [taylor](https://taylor.wjakethompson.com) package is for accessing and exploring data related to Taylor Swift’s discography, including lyrics and audio characteristics. The data comes Genius and the Spotify.\n\n## Tidy Syntax\n\nThe BIG picture of what we do in data science.\n\n<img src=\"figs/base.png\" width=\"90%\" style=\"display:block; margin-left: auto; margin-right: auto\"/>\n\n<figcaption>Figure 1: In our model of the data science process, you start with data import and tidying. Next, you understand your data with an iterative cycle of transforming, visualizing, and modeling. You finish the process by communicating your results to other humans.</figcaption>\n\n### Import\n\nFirst we need to import data into R. I prefer to import *.csv* files because I think its a good way to indicate a data file and it eliminates any weird formatting that may exist in excel. I am showing 2 ways to import the data one using base R function `read.csv()` and the other using the `readr` function `read_csv()`.\n\nIn base R, the `header` field determines if the first row of the data had column header titles or not. The `stringsAsFactors` determines if the character variables in your data set should be set as a factor variable (set as TRUE) or as character (set to FALSE). The `row.names` field will allow you to specify if the first column is data or the names of the rows.\n\nIn tidyverse, the `col_names` field specifies if the first row is a header. If you want to specify the type of data for each field you have to specify it using the `col_types` field. I specified that for you here. There are a lot more options you can look at in the *Help* section.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\n# reading in csv is for importing comma-separated files\n\n# base R\ndata_base <- read.csv(file = \"data/taylorswift.csv\", \n                 header = TRUE, \n                 sep = \",\", \n                 stringsAsFactors = TRUE)\n\n\n# Tidyverse\ndata_tidy <- read_csv(file = \"data/taylorswift.csv\",\n                 col_names = TRUE)\n```\n:::\n\n\nUsing `readr` you can also import data directly from excel spreadsheets using `read_excel` or `read_xls` and even google sheets using `read_sheet`. However, we won't use these function in the course. But you are free to explore them on your own from the [readr package](https://readr.tidyverse.org).\n\n### Export\n\nYou can also save files using the `write` functions for both csv or tsv files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nwrite.csv(data, file = \"data/taylorswift.csv\")\n\n# Tidyverse\nwrite_csv(data, file = \"data/taylorswift.csv\")\n```\n:::\n\n\n### Explore\n\nAnytime you get a data set the first thing you have to do is look at it! Some basic things to look at:\n\n-   Use the `dim()` function to check the size of the data set or `nrow` to count the rows and `ncol` to count the columns.\n-   Use the `class()` function to determine if an R object is a vector, matrix, or dataframe. And if the data type is in character, numeric, factor, or logic, for example.\n-   Use the`table()` or `count()` functions to tally the data to see how many types of any variable\n-   `glimpse()` is a quick way to view a snapshot of top of the data.\n\n::: callout-important\n## DATA TYPES\n\n-   character\n-   numeric\n-   integer\n-   factor\n-   logical\n:::\n\nLets look at data types in the `taylorswift` data in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first load the packages we are going to need\nlibrary(tidyverse)\n\n# next import some data, as an example we are using the taylorswift data\ndata <- read_csv(file = \"data/taylorswift.csv\",\n                 col_names = TRUE)\n\n# Its good to start any data analysis with basic data exploration.\n# how many columns of data are there?\nncol(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n\n```{.r .cell-code}\n# how many rows of observations are there?\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 314\n```\n\n\n:::\n\n```{.r .cell-code}\n# when we imported the data, what is the type of data in each column?\nas.data.frame(map_chr(data, class))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 map_chr(data, class)\nalbum_name                  character\nalbum_release                    Date\ntrack_number                  numeric\ntrack_name                  character\ndanceability                  numeric\nenergy                        numeric\nkey                           numeric\nloudness                      numeric\nmode                          numeric\nspeechiness                   numeric\nacousticness                  numeric\ninstrumentalness              numeric\nliveness                      numeric\nvalence                       numeric\ntempo                         numeric\ntime_signature                numeric\nduration_ms                   numeric\nexplicit                      logical\nkey_name                    character\nmode_name                   character\nkey_mode                    character\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 314\nColumns: 21\n$ album_name       <chr> \"Taylor Swift\", \"Taylor Swift\", \"Taylor Swift\", \"Tayl…\n$ album_release    <date> 2006-10-24, 2006-10-24, 2006-10-24, 2006-10-24, 2006…\n$ track_number     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1,…\n$ track_name       <chr> \"Tim McGraw\", \"Picture To Burn\", \"Teardrops On My Gui…\n$ danceability     <dbl> 0.580, 0.658, 0.621, 0.576, 0.418, 0.589, 0.479, 0.59…\n$ energy           <dbl> 0.491, 0.877, 0.417, 0.777, 0.482, 0.805, 0.578, 0.62…\n$ key              <dbl> 0, 7, 10, 9, 5, 5, 2, 8, 4, 2, 2, 8, 7, 4, 10, 5, 7, …\n$ loudness         <dbl> -6.462, -2.098, -6.941, -2.881, -5.769, -4.055, -4.96…\n$ mode             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ speechiness      <dbl> 0.0251, 0.0323, 0.0231, 0.0324, 0.0266, 0.0293, 0.029…\n$ acousticness     <dbl> 0.57500, 0.17300, 0.28800, 0.05100, 0.21700, 0.00491,…\n$ instrumentalness <dbl> 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.0…\n$ liveness         <dbl> 0.1210, 0.0962, 0.1190, 0.3200, 0.1230, 0.2400, 0.084…\n$ valence          <dbl> 0.425, 0.821, 0.289, 0.428, 0.261, 0.591, 0.192, 0.50…\n$ tempo            <dbl> 76.009, 105.586, 99.953, 115.028, 175.558, 112.982, 1…\n$ time_signature   <dbl> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ duration_ms      <dbl> 232107, 173067, 203040, 199200, 239013, 207107, 24810…\n$ explicit         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ key_name         <chr> \"C\", \"G\", \"A#\", \"A\", \"F\", \"F\", \"D\", \"G#\", \"E\", \"D\", \"…\n$ mode_name        <chr> \"major\", \"major\", \"major\", \"major\", \"major\", \"major\",…\n$ key_mode         <chr> \"C major\", \"G major\", \"A# major\", \"A major\", \"F major…\n```\n\n\n:::\n:::\n\n\n### Convert between data types\nOftentimes text is imported as a character variable. However, you may want that to be a factor to indicate there are 4 groups,  or a numeric variable should actually be a factor. The most common data type conversions are between: 1) characters -\\> factors 2) numeric -\\> factors. \n\nFor example, if you measured something across time at day 1, 5, 15, 30, 60, 120. Plotting the data across the expansive axis will make each groups not evenly divided so it can be useful to make the numeric variable a factor so all the data groups plot next to each other. \n\nWe can look at this in the `tyalorswift` data. If we plot the album release date as a date we can see the time represented in the distance and sometimes we may want that but other times we may not. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sometimes we want numeric variables as numbers and sometimes we want them to be factors. In this case the x axis is spaced based on the time between album releases.\nggplot(data, aes(x=album_release, y = track_number, color = album_name)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_R02_files/figure-html/convert2fac-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# However, if we look at the data in a different way having all the data scrunched at one end is hard to visualize when the time variable isn't needed to be viewed over time.\nggplot(data, aes(x=album_release, y = loudness, fill = album_name)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_R02_files/figure-html/convert2fac-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# It would look better to see the data more evenly distrubuted. To do that we can convert the date variable to a factor variable\ndata$album_release <- as.factor(data$album_release)\n\nggplot(data, aes(x=album_release, y = loudness, fill = album_name)) + \n  geom_boxplot() + \n  scale_x_discrete(guide = guide_axis(angle = 90))\n```\n\n::: {.cell-output-display}\n![](index_R02_files/figure-html/convert2fac-3.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In another example, as you can see in the plots above the \"album_name\" is plotted alphabetically.\nggplot(data, aes(x=album_name, y = loudness)) +\n  geom_boxplot() + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + theme_cowplot() \n```\n\n::: {.cell-output-display}\n![](index_R02_files/figure-html/ex2-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# However, if we want them to be plotted in a specific order that isn't alphabetical, but by release date, we must convert the character vector of \"album_name\" into a factor variable and specify the levels of the characters. \n\ndata$album_name <- factor(data$album_name, levels = unique(data$album_name[order(data$album_release)]))\n\nggplot(data, aes(x=album_name, y = loudness, fill=album_name)) +\n  geom_boxplot() + scale_fill_manual(values=album_compare) +\n  scale_x_discrete(guide = guide_axis(angle = 45)) + theme_cowplot() + theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_R02_files/figure-html/ex2.2-1.png){width=768}\n:::\n:::\n\n\n\n::: callout-tip\n### Want More?\n\nThere are so many great tools to learn R and data science!\n\n-   To explore the tidyverse and data science in more detail check out the *R for Data Science* [textbook](https://r4ds.hadley.nz) written by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\n\n-   Want more stats and data science conversations?! Check out the **not so standard deviations** [podcast](https://nssdeviations.com) by Roger Peng and Hilary Parker.\n:::\n",
    "supporting": [
      "index_R02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}