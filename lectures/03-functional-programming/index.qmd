---
title: "Functional programming"
author: 
  - name: Stephanie Hicks
    url: https://stephaniehicks.com
    affiliation: Department of Biostatistics, Johns Hopkins
    affiliation_url: https://publichealth.jhu.edu
description: "add here"
date: 2024-11-05
---


# Pre-lecture activities

::: callout-important

In advance of class, please install

* `purrr` - this provides a consistent functional programming interface to work with functions and vectors

You can do this by calling

```{r}
#| eval: false
install.packages("purrr")
```

And load the package using: 

```{r}
library(purrr)
```

:::

In addition, please read through

- <https://adv-r.hadley.nz/functionals.html>
- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>



::: callout-note

## How much should I prepare for before class? 

:::


# Lecture 

## Acknowledgements

Material for this lecture was borrowed and adopted from

- <https://adv-r.hadley.nz/fp.html>
- <https://adv-r.hadley.nz/functionals.html>
- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>


## Learning objectives

::: callout-note
### Learning objectives

**At the end of this lesson you will:**

-   Be familiar with the concept of _functional languages_ and _functional styles_ of programming
-   Get comfortable with the major functions in  `purrr` (e.g. the `map` family of functions)
-   Write your loops with `map` functions instead of the `for` loop

:::


## Slides 

- To be added. 


# Post-lecture

## Summary 

- Introduction to functional programming.
- The R package `purrr` provides a nice interface to functional programming and list manipulation.
- The function `map` and its aternative `map_*` provide a neat way to iterate over a list or vector with the output in different data structures.
- The function `map2` and `pmap` allow having more than one list as input.
- The function `walk` and its alternatives `walk2`, `walk_*`, which do not provide any output.

## Additional practice

Here are some additional practice questions to help you think about the material discussed.

::: callout-note
### Questions

1. Use `as_mapper()` to explore how purrr generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.

2. `map(1:3, ~ runif(2))` is a useful pattern for generating random numbers, but `map(1:3, runif(2))` is not. Why not? Can you explain why it returns the result that it does?

3. Can you write a section of code to demonstrate the central limit theorem primarily using the `purrr` package and/or using the R base package?  

4.  Use the appropriate `map()` function to:
    
    a) Compute the standard deviation of every column in a numeric data frame.
    
    a) Compute the standard deviation of every numeric column in a mixed data
       frame. (Hint: you will need to do it in two steps.)
       
    a) Compute the number of levels for every factor in a data frame.

5.  The following code simulates the performance of a t-test for non-normal 
    data. Extract the p-value from each test, then visualise.

    ```{r}
    trials <- map(1:100, ~ t.test(rpois(10, 10), rpois(7, 10)))
    ```

6.  Use `map()` to fit linear models to the `mtcars` dataset using the formulas
    stored in this list:

    ```{r}
    data(mtcars)
    formulas <- list(
      mpg ~ disp,
      mpg ~ I(1 / disp),
      mpg ~ disp + wt,
      mpg ~ I(1 / disp) + wt
    )
    ```

7.  Fit the model `mpg ~ disp` to each of the bootstrap replicates of `mtcars` 
    in the list below, then extract the $R^2$ of the model fit (Hint: you can
    compute the $R^2$ with `summary()`.)

    ```{r}
    bootstrap <- function(df) {
      df[sample(nrow(df), replace = TRUE), , drop = FALSE]
    }
    
    bootstraps <- map(1:10, ~ bootstrap(mtcars))
    ```

:::